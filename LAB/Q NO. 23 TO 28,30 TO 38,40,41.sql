-- Q24 - Create two tables: departments and employees. Perform an INNER JOIN to display employees along with their respective departments.
CREATE DATABASE EMPLOYEES_DB;

CREATE TABLE DEPARTMENTS
(
    DEPARTMENT_ID INT PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR(25) NOT NULL
);
DROP TABLE DEPARTMENTS;
CREATE TABLE EMPLOYEES
(
    EMPLOYEE_ID INT NOT NULL UNIQUE,
    EMPLOYEE_NAME VARCHAR(25) NOT NULL,
    DEPARTMENT_ID INT NOT NULL,
    SALARY INT NOT NULL,
    Foreign Key EMPLOYEES(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
);
DROP TABLE EMPLOYEES;

INSERT DEPARTMENTS VALUES (1,'CIVIL'),
(2,'MECHANICAL'),
(3,'ELECTRICAL'),
(4,'MANAGMENT'),
(5,'LOADING'),
(6,'LABOUR');
SELECT * FROM DEPARTMENTS;
INSERT EMPLOYEES VALUES (1,'PARTH PATEL',1,35000),
(2,'DEEP PANCHAL',3,25000),
(3,'PRANSHU KAMANI',2,30000),
(4,'PREET PADALIYA',4,50000),
(5,'DEV PETHANI',5,20000),
(6,'JAY MAHIDA',2,25000),
(7,'SEJAL PATEL',4,55000),
(8,'RAKSHIT PARMAR',5,25000),
(9,'HET CHAUDHARY',3,35000),
(10,'MAYUR LILA',1,40000);
SELECT * FROM EMPLOYEES;
SELECT EMPLOYEES.EMPLOYEE_ID,EMPLOYEES.EMPLOYEE_NAME,DEPARTMENTS.DEPARTMENT_ID,DEPARTMENTS.DEPARTMENT_NAME
FROM DEPARTMENTS INNER JOIN EMPLOYEES ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

-- Q25 - Use a LEFT JOIN to show all departments, even those without employees.
SELECT EMPLOYEES.EMPLOYEE_ID,EMPLOYEES.EMPLOYEE_NAME,DEPARTMENTS.DEPARTMENT_ID,DEPARTMENTS.DEPARTMENT_NAME
FROM DEPARTMENTS LEFT JOIN EMPLOYEES ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

-- Q26 - Group employees by department and count the number of employees in each department using GROUP BY.
SELECT DEPARTMENT_ID,COUNT(*) FROM EMPLOYEES GROUP BY DEPARTMENT_ID;

-- Q27 - Use the AVG aggregate function to find the average salary of employees in each department.
SELECT DEPARTMENT_ID,AVG(SALARY) FROM EMPLOYEES GROUP BY DEPARTMENT_ID;

-- Q28 - Write a stored procedure to retrieve all employees from the employees table based on department.
DELIMITER &&
CREATE PROCEDURE DISPLAY()
SELECT * FROM EMPLOYEES ORDER BY DEPARTMENT_ID;
END &&

CALL DISPLAY();

-- Q30 - Create a view to show all employees along with their department names.
CREATE VIEW EMPLOYEE_DEPARTMENT AS
SELECT EMPLOYEES.EMPLOYEE_ID,EMPLOYEES.EMPLOYEE_NAME,EMPLOYEES.SALARY,DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES LEFT JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

SELECT * FROM EMPLOYEE_DEPARTMENT;

-- Q31 - Modify the view to exclude employees whose salaries are below $50,000.
ALTER VIEW EMPLOYEE_DEPARTMENT AS
SELECT * FROM EMPLOYEES WHERE SALARY < 50000;

SELECT * FROM EMPLOYEE_DEPARTMENT;

-- Q32 - Create a trigger to automatically log changes to the employees table when a new employee is added.
-- Q33 - Create a trigger to update the last_modified timestamp whenever an employee record is updated.

CREATE TABLE UPDATE_EMPLOYEES
(
    EMPLOYEE_ID INT NOT NULL UNIQUE,
    EMPLOYEE_NAME VARCHAR(25) NOT NULL,
    DEPARTMENT_ID INT NOT NULL,
    SALARY INT NOT NULL,
    ACTION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ACTION_TYPE VARCHAR(10)
);

DROP TABLE UPDATE_EMPLOYEES;

CREATE OR REPLACE TRIGGER trg_employee_insert_log
AFTER INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    INSERT INTO UPDATE_EMPLOYEES (EMPLOYEE_ID,EMPLOYEE_NAME,DEPARTMENT_ID,SALARY,ACTION_TYPE)
    VALUES (NEW.EMPLOYEE_ID,NEW.EMPLOYEE_NAME,NEW.DEPARTMENT_ID,NEW.SALARY);
END;

INSERT INTO UPDATE_EMPLOYEES(EMPLOYEE_ID,EMPLOYEE_NAME,DEPARTMENT_ID,SALARY) 
VALUES (11,'RAJ PARMAR',6,15000);
INSERT INTO UPDATE_EMPLOYEES(EMPLOYEE_ID,EMPLOYEE_NAME,DEPARTMENT_ID,SALARY) 
VALUES (12,'JAY PATEL',6,15000);

SELECT * FROM UPDATE_EMPLOYEES;

-- Q34 - Write a PL/SQL block to print the total number of employees from the employees table.

DECLARE
    TOTAL_EMPLOYEE NUMBER;
BEGIN
    SELECT COUNT(*) INTO TOTAL_EMPLOYEE
    FROM EMPLOYEES
    JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;
    DBMS_OUTPUT.PUT_LINE('Total number of employees: '||(TOTAL_EMPLOYEE));
END;

-- Q35 - Create a PL/SQL block that calculates the total sales from an orders table

CREATE TABLE ORDERS
(
ORDER_ID INT NOT NULL UNIQUE,
ORDER_NAME VARCHAR(15) NOT NULL,
QUN INT NOT NULL
);

INSERT INTO ORDERS VALUES (1,'TOOTHPAST',5);
INSERT INTO ORDERS VALUES (2,'PERFUME',10);
INSERT INTO ORDERS VALUES (3,'TOOTHBRUSH',8);
INSERT INTO ORDERS VALUES (4,'SHOPE',6);
INSERT INTO ORDERS VALUES (5,'COMB',3);
INSERT INTO ORDERS VALUES (6,'SHEMPOO',2);

DECLARE 
 TOTAL_SALES NUMBER;
BEGIN 
  SELECT SUM(QUN) INTO TOTAL_SALES
  FROM ORDERS;
  DBMS_OUTPUT.PUT_LINE ('TOTAL SALES IS : '||(TOTAL_SALES));
END;

-- Q36 - Write a PL/SQL block using an IF-THEN condition to check the department of an employee.

DECLARE 
  EMP_ID NUMBER :=8;
	DEPT_ID NUMBER;
	EMP_NAME VARCHAR(25);
BEGIN
    SELECT  EMPLOYEE_NAME,DEPARTMENT_ID 
    INTO EMP_NAME,DEPT_ID 
    FROM EMPLOYEES 
    WHERE EMPLOYEE_ID = EMP_ID;
    IF DEPT_ID = 1 THEN
		DBMS_OUTPUT.PUT_LINE (EMP_NAME||' IN CIVILDEPARTMENT.');
		ELSIF DEPT_ID = 2 THEN
		DBMS_OUTPUT.PUT_LINE (EMP_NAME||' IN MECHANICALDEPARTMENT.');
		ELSIF DEPT_ID = 3 THEN
		DBMS_OUTPUT.PUT_LINE (EMP_NAME||' IN ELECTRICALDEPARTMENT.');
		ELSIF DEPT_ID = 4 THEN
		DBMS_OUTPUT.PUT_LINE (EMP_NAME||' IN MANAGMENTDEPARTMENT.');
		ELSIF DEPT_ID = 5 THEN
		DBMS_OUTPUT.PUT_LINE (EMP_NAME||' IN LOADINGDEPARTMENT.');
		ELSE
		DBMS_OUTPUT.PUT_LINE (EMP_NAME||' IN LABOURDEPARTMENT.');
	END IF;
END;

-- Q37 - Use a FOR LOOP to iterate through employee records and display their names

DECLARE 
	EMP_NAME EMPLOYEES.EMPLOYEE_NAME %TYPE;
BEGIN
	FOR EMP_REC IN (SELECT EMPLOYEE_NAME FROM EMPLOYEES) LOOP
		EMP_NAME := EMP_REC.EMPLOYEE_NAME;
		DBMS_OUTPUT.PUT_LINE ('EMPLOYEE NAME IS '|| EMP_NAME);
	END LOOP;
END;

-- Q38 - Write a PL/SQL block using an explicit cursor to retrieve and display employee details.

DECLARE
  EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
  EMP_NAME EMPLOYEES.EMPLOYEE_NAME%TYPE;
  DEPT_ID EMPLOYEES.DEPARTMENT_ID%TYPE;
  SAL EMPLOYEES.SALARY%TYPE;
  CURSOR EMP IS SELECT EMPLOYEE_ID,EMPLOYEE_NAME,DEPARTMENT_ID,SALARY FROM EMPLOYEES;
BEGIN
OPEN EMP;
LOOP
FETCH EMP INTO EMP_ID,EMP_NAME,DEPT_ID,SAL;
DBMS_OUTPUT.PUT_LINE (EMP_ID||' | '|| EMP_NAME ||' | '||DEPT_ID||' | '|| SAL);
EXIT WHEN EMP%NOTFOUND;
END LOOP;
CLOSE EMP;
END;

-- Q40 - Perform a transaction where you create a savepoint, insert records, then rollback to the savepoint.
-- Q41 - Commit part of a transaction after using a savepoint and then rollback the remaining changes.

UPDATE EMPLOYEES SET SALARY = 30000 WHERE EMPLOYEE_ID = 2;
SAVEPOINT E1;
UPDATE EMPLOYEES SET SALARY = 25000 WHERE EMPLOYEE_ID = 5;
SAVEPOINT E2;
UPDATE EMPLOYEES SET SALARY = 20000 WHERE EMPLOYEE_ID = 8;
SAVEPOINT E3;

ROLLBACK TO SAVEPOINT E1;

COMMIT;

SELECT * FROM EMPLOYEES;




